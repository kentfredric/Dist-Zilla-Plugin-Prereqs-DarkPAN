.\" Automatically generated by Pod::Man 2.26 (Pod::Simple 3.22)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Dist::Zilla::Plugin::Prereqs::DarkPAN 3"
.TH Dist::Zilla::Plugin::Prereqs::DarkPAN 3 "2012-07-07" "perl v5.16.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dist::Zilla::Plugin::Prereqs::DarkPAN \- Depend on things from arbitrary places\-not\-CPAN
.SH "VERSION"
.IX Header "VERSION"
version 0.2.2
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
From time to time, people find themselves in want to depending on something that
isn't from \s-1CPAN\s0, but their team/in\-house crew want a painless way to depend on
it anyway.
.PP
.Vb 7
\&  [Prereqs::DarkPAN]
\&  DDG = http://adarkpan.example.org/  ; DarkPAN Base URI
\&  ; optional
\&  DDG.minversion = 0.4.0
\&  ; optional
\&  ; But likely to be substantially faster.
\&  DDG.uri = /path/to/foo/bar.tar.gz
.Ve
.PP
This would provide to various user commands the knowledge that \s-1DDG\s0.tar.gz was
wanted to provide the package \s-1DDG\s0.
.PP
Our hope is one day you can just do
.PP
.Vb 2
\&  # Doesn\*(Aqt work yet :(
\&  $ cpanm $( dzil listdeps )
\&
\&  or
\&  # Doesn\*(Aqt work yet :(
\&  $ cpanm $( dzil listdeps \-\-missing )
.Ve
.PP
and have it do the right things.
.PP
In the interim, you can do
.PP
.Vb 2
\&    $ cpanm $( dzil listdeps )  \e
\&      && cpanm $( dzil listdeps_darkpan )
.Ve
.PP
or
.PP
.Vb 2
\&    $ cpanm $( dzil listdeps \-\-missing ) \e
\&      && cpanm $( dzil listdeps_darkpan \-\-missing )
.Ve
.PP
and have it work.
.SH "DarkPAN Configurations."
.IX Header "DarkPAN Configurations."
.SS "A Simple \s-1HTTP\s0 Server"
.IX Subsection "A Simple HTTP Server"
The easiest DarkPAN-ish thing that this module supports is nai\*:ve \s-1HTTP\s0 Servers,
by simply setting the server and path to the resource.
.PP
.Vb 3
\&  [Prereqs::DarkPAN]
\&  Foo = http://my.server/
\&  Foo.uri =  files/foo.tar.gz
.Ve
.PP
You can specify an optional minimum version parameter \f(CW\*(C`minversion\*(C'\fR as a client-side check to
make sure they haven't installed an older version of Foo.
.PP
This \f(CW\*(C`uri\*(C'\fR will be reported to listdeps_darkpan with minimal modification, only
expanding relative paths to absolute ones so tools like \f(CW\*(C`cpanm\*(C'\fR can use them.
.SS "A MicroCPAN Configuration"
.IX Subsection "A MicroCPAN Configuration"
There is a newly formed system for creating \*(L"proper\*(R" cpans which only contain a
handful of modules. For these services you can simply do
.PP
.Vb 2
\&  [Prereqs::DarkPAN]
\&  Foo = http://my.server/
.Ve
.PP
And we'll fire up all sorts of magic to get the \f(CW\*(C`02packages.details.tar.gz\*(C'\fR
file, shred it, and try installing 'Foo' from there.
.SS "Heavier \s-1CPAN\s0 configurations"
.IX Subsection "Heavier CPAN configurations"
The 3rd use case is when you have somewhat heavy-weight private CPANs where you
don't want to be encumbered by the weight of downloading and parsing
\&\f(CW\*(C`02packages.details.tar.gz\*(C'\fR. If you have a full cpan clone with a few modules
stuffed into it, and you only want those stuffed modules while using normal \s-1CPAN\s0
( because the cloned versions from cpan are now old ), its possibly better to
use the original notation
.PP
.Vb 3
\&  [Prereqs::DarkPAN]
\&  Foo = http://my.server/
\&  Foo.uri = path/too/foo.tar.gz
.Ve
.PP
As it will only fetch the file specified instead of relying on
\&\f(CW\*(C`02packages.details.tar.gz\*(C'\fR
.PP
Granted, this latter approach will bind again to downloading a specific version
of the prerequisite, but this is still here for you if you need it.
.SH "AUTHOR"
.IX Header "AUTHOR"
Kent Fredric <kentnl@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2012 by Kent Fredric <kentnl@cpan.org>.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
